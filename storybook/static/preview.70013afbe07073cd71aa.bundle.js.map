{"version":3,"file":"static/preview.70013afbe07073cd71aa.bundle.js","sources":["webpack:///./src/react-sortable-tree.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { AutoSizer, List } from 'react-virtualized';\nimport isEqual from 'lodash.isequal';\nimport withScrolling, {\n  createVerticalStrength,\n  createHorizontalStrength,\n} from 'react-dnd-scrollzone';\nimport 'react-virtualized/styles.css';\nimport TreeNode from './tree-node';\nimport NodeRendererDefault from './node-renderer-default';\nimport TreePlaceholder from './tree-placeholder';\nimport PlaceholderRendererDefault from './placeholder-renderer-default';\nimport {\n  walk,\n  changeNodeAtPath,\n  removeNode,\n  insertNode,\n  find,\n  toggleExpandedForAll,\n} from './utils/tree-data-utils';\nimport {\n  memoizedInsertNode,\n  memoizedGetFlatDataFromTree,\n  memoizedGetDescendantCount,\n} from './utils/memoized-tree-data-utils';\nimport { slideRows } from './utils/generic-utils';\nimport {\n  defaultGetNodeKey,\n  defaultSearchMethod,\n} from './utils/default-handlers';\nimport DndManager from './utils/dnd-manager';\nimport classnames from './utils/classnames';\nimport './react-sortable-tree.css';\n\nlet treeIdCounter = 1;\n\nconst mergeTheme = props => {\n  const merged = {\n    ...props,\n    style: { ...props.theme.style, ...props.style },\n    innerStyle: { ...props.theme.innerStyle, ...props.innerStyle },\n    reactVirtualizedListProps: {\n      ...props.theme.reactVirtualizedListProps,\n      ...props.reactVirtualizedListProps,\n    },\n  };\n\n  const overridableDefaults = {\n    nodeContentRenderer: NodeRendererDefault,\n    placeholderRenderer: PlaceholderRendererDefault,\n    rowHeight: 62,\n    scaffoldBlockPxWidth: 44,\n    slideRegionSize: 100,\n    treeNodeRenderer: TreeNode,\n  };\n  Object.keys(overridableDefaults).forEach(propKey => {\n    // If prop has been specified, do not change it\n    // If prop is specified in theme, use the theme setting\n    // If all else fails, fall back to the default\n    if (props[propKey] === null) {\n      merged[propKey] =\n        typeof props.theme[propKey] !== 'undefined'\n          ? props.theme[propKey]\n          : overridableDefaults[propKey];\n    }\n  });\n\n  return merged;\n};\n\nclass ReactSortableTree extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      dndType,\n      nodeContentRenderer,\n      treeNodeRenderer,\n      isVirtualized,\n      slideRegionSize,\n    } = mergeTheme(props);\n\n    this.dndManager = new DndManager(this);\n\n    // Wrapping classes for use with react-dnd\n    this.treeId = `rst__${treeIdCounter}`;\n    treeIdCounter += 1;\n    this.dndType = dndType || this.treeId;\n    this.nodeContentRenderer = this.dndManager.wrapSource(nodeContentRenderer);\n    this.treePlaceholderRenderer = this.dndManager.wrapPlaceholder(\n      TreePlaceholder\n    );\n    this.treeNodeRenderer = this.dndManager.wrapTarget(treeNodeRenderer);\n\n    // Prepare scroll-on-drag options for this list\n    if (isVirtualized) {\n      this.scrollZoneVirtualList = withScrolling(List);\n      this.vStrength = createVerticalStrength(slideRegionSize);\n      this.hStrength = createHorizontalStrength(slideRegionSize);\n    }\n\n    this.state = {\n      draggingTreeData: null,\n      draggedNode: null,\n      draggedMinimumTreeIndex: null,\n      draggedDepth: null,\n      searchMatches: [],\n      searchFocusTreeIndex: null,\n      dragging: false,\n    };\n\n    this.toggleChildrenVisibility = this.toggleChildrenVisibility.bind(this);\n    this.moveNode = this.moveNode.bind(this);\n    this.startDrag = this.startDrag.bind(this);\n    this.dragHover = this.dragHover.bind(this);\n    this.endDrag = this.endDrag.bind(this);\n    this.drop = this.drop.bind(this);\n    this.handleDndMonitorChange = this.handleDndMonitorChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadLazyChildren();\n    this.search(this.props);\n\n    // Hook into react-dnd state changes to detect when the drag ends\n    // TODO: This is very brittle, so it needs to be replaced if react-dnd\n    // offers a more official way to detect when a drag ends\n    this.clearMonitorSubscription = this.context.dragDropManager\n      .getMonitor()\n      .subscribeToStateChange(this.handleDndMonitorChange);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.treeData !== nextProps.treeData) {\n      // Ignore updates caused by search, in order to avoid infinite looping\n      if (this.ignoreOneTreeUpdate) {\n        this.ignoreOneTreeUpdate = false;\n      } else {\n        // Reset the focused index if the tree has changed\n        this.setState({ searchFocusTreeIndex: null });\n\n        // Load any children defined by a function\n        this.loadLazyChildren(nextProps);\n\n        this.search(nextProps, false, false);\n      }\n\n      // Reset the drag state\n      this.setState({\n        draggingTreeData: null,\n        draggedNode: null,\n        draggedMinimumTreeIndex: null,\n        draggedDepth: null,\n        dragging: false,\n      });\n    } else if (!isEqual(this.props.searchQuery, nextProps.searchQuery)) {\n      this.search(nextProps);\n    } else if (this.props.searchFocusOffset !== nextProps.searchFocusOffset) {\n      this.search(nextProps, true, true, true);\n    }\n  }\n\n  // listen to dragging\n  componentDidUpdate(prevProps, prevState) {\n    // if it is not the same then call the onDragStateChanged\n    if (this.state.dragging !== prevState.dragging) {\n      if (this.props.onDragStateChanged) {\n        this.props.onDragStateChanged({\n          isDragging: this.state.dragging,\n          draggedNode: this.state.draggedNode,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearMonitorSubscription();\n  }\n\n  getRows(treeData) {\n    return memoizedGetFlatDataFromTree({\n      ignoreCollapsed: true,\n      getNodeKey: this.props.getNodeKey,\n      treeData,\n    });\n  }\n\n  handleDndMonitorChange() {\n    const monitor = this.context.dragDropManager.getMonitor();\n    // If the drag ends and the tree is still in a mid-drag state,\n    // it means that the drag was canceled or the dragSource dropped\n    // elsewhere, and we should reset the state of this tree\n    if (!monitor.isDragging() && this.state.draggingTreeData) {\n      this.endDrag();\n    }\n  }\n\n  toggleChildrenVisibility({ node: targetNode, path }) {\n    const treeData = changeNodeAtPath({\n      treeData: this.props.treeData,\n      path,\n      newNode: ({ node }) => ({ ...node, expanded: !node.expanded }),\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    this.props.onChange(treeData);\n\n    this.props.onVisibilityToggle({\n      treeData,\n      node: targetNode,\n      expanded: !targetNode.expanded,\n      path,\n    });\n  }\n\n  moveNode({\n    node,\n    path: prevPath,\n    treeIndex: prevTreeIndex,\n    depth,\n    minimumTreeIndex,\n  }) {\n    const {\n      treeData,\n      treeIndex,\n      path,\n      parentNode: nextParentNode,\n    } = insertNode({\n      treeData: this.state.draggingTreeData,\n      newNode: node,\n      depth,\n      minimumTreeIndex,\n      expandParent: true,\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    this.props.onChange(treeData);\n\n    this.props.onMoveNode({\n      treeData,\n      node,\n      treeIndex,\n      path,\n      nextPath: path,\n      nextTreeIndex: treeIndex,\n      prevPath,\n      prevTreeIndex,\n      nextParentNode,\n    });\n  }\n\n  search(\n    props = this.props,\n    seekIndex = true,\n    expand = true,\n    singleSearch = false\n  ) {\n    const {\n      treeData,\n      onChange,\n      searchFinishCallback,\n      searchQuery,\n      searchMethod,\n      searchFocusOffset,\n      onlyExpandSearchedNodes,\n    } = props;\n\n    // Skip search if no conditions are specified\n    if (\n      (searchQuery === null ||\n        typeof searchQuery === 'undefined' ||\n        String(searchQuery) === '') &&\n      !searchMethod\n    ) {\n      this.setState({\n        searchMatches: [],\n      });\n\n      if (searchFinishCallback) {\n        searchFinishCallback([]);\n      }\n\n      return;\n    }\n\n    // if onlyExpandSearchedNodes collapse the tree and search\n    const { treeData: expandedTreeData, matches: searchMatches } = find({\n      getNodeKey: this.props.getNodeKey,\n      treeData: onlyExpandSearchedNodes\n        ? toggleExpandedForAll({ treeData, expanded: false })\n        : treeData,\n      searchQuery,\n      searchMethod: searchMethod || defaultSearchMethod,\n      searchFocusOffset,\n      expandAllMatchPaths: expand && !singleSearch,\n      expandFocusMatchPaths: !!expand,\n    });\n\n    // Update the tree with data leaving all paths leading to matching nodes open\n    if (expand) {\n      this.ignoreOneTreeUpdate = true; // Prevents infinite loop\n      onChange(expandedTreeData);\n    }\n\n    if (searchFinishCallback) {\n      searchFinishCallback(searchMatches);\n    }\n\n    let searchFocusTreeIndex = null;\n    if (\n      seekIndex &&\n      searchFocusOffset !== null &&\n      searchFocusOffset < searchMatches.length\n    ) {\n      searchFocusTreeIndex = searchMatches[searchFocusOffset].treeIndex;\n    }\n\n    this.setState({\n      searchMatches,\n      searchFocusTreeIndex,\n    });\n  }\n\n  startDrag({ path }) {\n    this.setState(() => {\n      const {\n        treeData: draggingTreeData,\n        node: draggedNode,\n        treeIndex: draggedMinimumTreeIndex,\n      } = removeNode({\n        treeData: this.props.treeData,\n        path,\n        getNodeKey: this.props.getNodeKey,\n      });\n\n      return {\n        draggingTreeData,\n        draggedNode,\n        draggedDepth: path.length - 1,\n        draggedMinimumTreeIndex,\n        dragging: true,\n      };\n    });\n  }\n\n  dragHover({\n    node: draggedNode,\n    depth: draggedDepth,\n    minimumTreeIndex: draggedMinimumTreeIndex,\n  }) {\n    // Ignore this hover if it is at the same position as the last hover\n    if (\n      this.state.draggedDepth === draggedDepth &&\n      this.state.draggedMinimumTreeIndex === draggedMinimumTreeIndex\n    ) {\n      return;\n    }\n\n    // Fall back to the tree data if something is being dragged in from\n    //  an external element\n    const draggingTreeData = this.state.draggingTreeData || this.props.treeData;\n\n    const addedResult = memoizedInsertNode({\n      treeData: draggingTreeData,\n      newNode: draggedNode,\n      depth: draggedDepth,\n      minimumTreeIndex: draggedMinimumTreeIndex,\n      expandParent: true,\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    const rows = this.getRows(addedResult.treeData);\n    const expandedParentPath = rows[addedResult.treeIndex].path;\n\n    this.setState({\n      draggedNode,\n      draggedDepth,\n      draggedMinimumTreeIndex,\n      draggingTreeData: changeNodeAtPath({\n        treeData: draggingTreeData,\n        path: expandedParentPath.slice(0, -1),\n        newNode: ({ node }) => ({ ...node, expanded: true }),\n        getNodeKey: this.props.getNodeKey,\n      }),\n      // reset the scroll focus so it doesn't jump back\n      // to a search result while dragging\n      searchFocusTreeIndex: null,\n      dragging: true,\n    });\n  }\n\n  endDrag(dropResult) {\n    const resetTree = () =>\n      this.setState({\n        draggingTreeData: null,\n        draggedNode: null,\n        draggedMinimumTreeIndex: null,\n        draggedDepth: null,\n        dragging: false,\n      });\n\n    // Drop was cancelled\n    if (!dropResult) {\n      resetTree();\n    } else if (dropResult.treeId !== this.treeId) {\n      // The node was dropped in an external drop target or tree\n      const { node, path, treeIndex } = dropResult;\n      let shouldCopy = this.props.shouldCopyOnOutsideDrop;\n      if (typeof shouldCopy === 'function') {\n        shouldCopy = shouldCopy({\n          node,\n          prevTreeIndex: treeIndex,\n          prevPath: path,\n        });\n      }\n\n      let treeData = this.state.draggingTreeData || this.props.treeData;\n\n      // If copying is enabled, a drop outside leaves behind a copy in the\n      //  source tree\n      if (shouldCopy) {\n        treeData = changeNodeAtPath({\n          treeData: this.props.treeData, // use treeData unaltered by the drag operation\n          path,\n          newNode: ({ node: copyNode }) => ({ ...copyNode }), // create a shallow copy of the node\n          getNodeKey: this.props.getNodeKey,\n        });\n      }\n\n      this.props.onChange(treeData);\n\n      this.props.onMoveNode({\n        treeData,\n        node,\n        treeIndex: null,\n        path: null,\n        nextPath: null,\n        nextTreeIndex: null,\n        prevPath: path,\n        prevTreeIndex: treeIndex,\n      });\n    }\n  }\n\n  drop(dropResult) {\n    this.moveNode(dropResult);\n  }\n\n  // Load any children in the tree that are given by a function\n  loadLazyChildren(props = this.props) {\n    walk({\n      treeData: props.treeData,\n      getNodeKey: this.props.getNodeKey,\n      callback: ({ node, path, lowerSiblingCounts, treeIndex }) => {\n        // If the node has children defined by a function, and is either expanded\n        //  or set to load even before expansion, run the function.\n        if (\n          node.children &&\n          typeof node.children === 'function' &&\n          (node.expanded || props.loadCollapsedLazyChildren)\n        ) {\n          // Call the children fetching function\n          node.children({\n            node,\n            path,\n            lowerSiblingCounts,\n            treeIndex,\n\n            // Provide a helper to append the new data when it is received\n            done: childrenArray =>\n              this.props.onChange(\n                changeNodeAtPath({\n                  treeData: this.props.treeData,\n                  path,\n                  newNode: ({ node: oldNode }) =>\n                    // Only replace the old node if it's the one we set off to find children\n                    //  for in the first place\n                    oldNode === node\n                      ? {\n                          ...oldNode,\n                          children: childrenArray,\n                        }\n                      : oldNode,\n                  getNodeKey: this.props.getNodeKey,\n                })\n              ),\n          });\n        }\n      },\n    });\n  }\n\n  renderRow(\n    { node, parentNode, path, lowerSiblingCounts, treeIndex },\n    { listIndex, style, getPrevRow, matchKeys, swapFrom, swapDepth, swapLength }\n  ) {\n    const {\n      canDrag,\n      generateNodeProps,\n      scaffoldBlockPxWidth,\n      searchFocusOffset,\n    } = mergeTheme(this.props);\n    const TreeNodeRenderer = this.treeNodeRenderer;\n    const NodeContentRenderer = this.nodeContentRenderer;\n    const nodeKey = path[path.length - 1];\n    const isSearchMatch = nodeKey in matchKeys;\n    const isSearchFocus =\n      isSearchMatch && matchKeys[nodeKey] === searchFocusOffset;\n    const callbackParams = {\n      node,\n      parentNode,\n      path,\n      lowerSiblingCounts,\n      treeIndex,\n      isSearchMatch,\n      isSearchFocus,\n    };\n    const nodeProps = !generateNodeProps\n      ? {}\n      : generateNodeProps(callbackParams);\n    const rowCanDrag =\n      typeof canDrag !== 'function' ? canDrag : canDrag(callbackParams);\n\n    const sharedProps = {\n      treeIndex,\n      scaffoldBlockPxWidth,\n      node,\n      path,\n      treeId: this.treeId,\n    };\n\n    return (\n      <TreeNodeRenderer\n        style={style}\n        key={nodeKey}\n        listIndex={listIndex}\n        getPrevRow={getPrevRow}\n        lowerSiblingCounts={lowerSiblingCounts}\n        swapFrom={swapFrom}\n        swapLength={swapLength}\n        swapDepth={swapDepth}\n        {...sharedProps}\n      >\n        <NodeContentRenderer\n          parentNode={parentNode}\n          isSearchMatch={isSearchMatch}\n          isSearchFocus={isSearchFocus}\n          canDrag={rowCanDrag}\n          toggleChildrenVisibility={this.toggleChildrenVisibility}\n          {...sharedProps}\n          {...nodeProps}\n        />\n      </TreeNodeRenderer>\n    );\n  }\n\n  render() {\n    const {\n      style,\n      className,\n      innerStyle,\n      rowHeight,\n      isVirtualized,\n      placeholderRenderer,\n      reactVirtualizedListProps,\n      getNodeKey,\n    } = mergeTheme(this.props);\n    const {\n      searchMatches,\n      searchFocusTreeIndex,\n      draggedNode,\n      draggedDepth,\n      draggedMinimumTreeIndex,\n    } = this.state;\n\n    const treeData = this.state.draggingTreeData || this.props.treeData;\n\n    let rows;\n    let swapFrom = null;\n    let swapLength = null;\n    if (draggedNode && draggedMinimumTreeIndex !== null) {\n      const addedResult = memoizedInsertNode({\n        treeData,\n        newNode: draggedNode,\n        depth: draggedDepth,\n        minimumTreeIndex: draggedMinimumTreeIndex,\n        expandParent: true,\n        getNodeKey,\n      });\n\n      const swapTo = draggedMinimumTreeIndex;\n      swapFrom = addedResult.treeIndex;\n      swapLength = 1 + memoizedGetDescendantCount({ node: draggedNode });\n      rows = slideRows(\n        this.getRows(addedResult.treeData),\n        swapFrom,\n        swapTo,\n        swapLength\n      );\n    } else {\n      rows = this.getRows(treeData);\n    }\n\n    // Get indices for rows that match the search conditions\n    const matchKeys = {};\n    searchMatches.forEach(({ path }, i) => {\n      matchKeys[path[path.length - 1]] = i;\n    });\n\n    // Seek to the focused search result if there is one specified\n    const scrollToInfo =\n      searchFocusTreeIndex !== null\n        ? { scrollToIndex: searchFocusTreeIndex }\n        : {};\n\n    let containerStyle = style;\n    let list;\n    if (rows.length < 1) {\n      const Placeholder = this.treePlaceholderRenderer;\n      const PlaceholderContent = placeholderRenderer;\n      list = (\n        <Placeholder treeId={this.treeId} drop={this.drop}>\n          <PlaceholderContent />\n        </Placeholder>\n      );\n    } else if (isVirtualized) {\n      containerStyle = { height: '100%', ...containerStyle };\n\n      const ScrollZoneVirtualList = this.scrollZoneVirtualList;\n      // Render list with react-virtualized\n      list = (\n        <AutoSizer>\n          {({ height, width }) => (\n            <ScrollZoneVirtualList\n              {...scrollToInfo}\n              verticalStrength={this.vStrength}\n              horizontalStrength={this.hStrength}\n              speed={30}\n              scrollToAlignment=\"start\"\n              className=\"rst__virtualScrollOverride\"\n              width={width}\n              onScroll={({ scrollTop }) => {\n                this.scrollTop = scrollTop;\n              }}\n              height={height}\n              style={innerStyle}\n              rowCount={rows.length}\n              estimatedRowSize={\n                typeof rowHeight !== 'function' ? rowHeight : undefined\n              }\n              rowHeight={\n                typeof rowHeight !== 'function'\n                  ? rowHeight\n                  : ({ index }) =>\n                      rowHeight({\n                        index,\n                        treeIndex: index,\n                        node: rows[index].node,\n                        path: rows[index].path,\n                      })\n              }\n              rowRenderer={({ index, style: rowStyle }) =>\n                this.renderRow(rows[index], {\n                  listIndex: index,\n                  style: rowStyle,\n                  getPrevRow: () => rows[index - 1] || null,\n                  matchKeys,\n                  swapFrom,\n                  swapDepth: draggedDepth,\n                  swapLength,\n                })\n              }\n              {...reactVirtualizedListProps}\n            />\n          )}\n        </AutoSizer>\n      );\n    } else {\n      // Render list without react-virtualized\n      list = rows.map((row, index) =>\n        this.renderRow(row, {\n          listIndex: index,\n          style: {\n            height:\n              typeof rowHeight !== 'function'\n                ? rowHeight\n                : rowHeight({\n                    index,\n                    treeIndex: index,\n                    node: row.node,\n                    path: row.path,\n                  }),\n          },\n          getPrevRow: () => rows[index - 1] || null,\n          matchKeys,\n          swapFrom,\n          swapDepth: draggedDepth,\n          swapLength,\n        })\n      );\n    }\n\n    return (\n      <div\n        className={classnames('rst__tree', className)}\n        style={containerStyle}\n      >\n        {list}\n      </div>\n    );\n  }\n}\n\nReactSortableTree.propTypes = {\n  // Tree data in the following format:\n  // [{title: 'main', subtitle: 'sub'}, { title: 'value2', expanded: true, children: [{ title: 'value3') }] }]\n  // `title` is the primary label for the node\n  // `subtitle` is a secondary label for the node\n  // `expanded` shows children of the node if true, or hides them if false. Defaults to false.\n  // `children` is an array of child nodes belonging to the node.\n  treeData: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  // Style applied to the container wrapping the tree (style defaults to {height: '100%'})\n  style: PropTypes.shape({}),\n\n  // Class name for the container wrapping the tree\n  className: PropTypes.string,\n\n  // Style applied to the inner, scrollable container (for padding, etc.)\n  innerStyle: PropTypes.shape({}),\n\n  // Used by react-virtualized\n  // Either a fixed row height (number) or a function that returns the\n  // height of a row given its index: `({ index: number }): number`\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n\n  // Size in px of the region near the edges that initiates scrolling on dragover\n  slideRegionSize: PropTypes.number,\n\n  // Custom properties to hand to the react-virtualized list\n  // https://github.com/bvaughn/react-virtualized/blob/master/docs/List.md#prop-types\n  reactVirtualizedListProps: PropTypes.shape({}),\n\n  // The width of the blocks containing the lines representing the structure of the tree.\n  scaffoldBlockPxWidth: PropTypes.number,\n\n  // Maximum depth nodes can be inserted at. Defaults to infinite.\n  maxDepth: PropTypes.number,\n\n  // The method used to search nodes.\n  // Defaults to a function that uses the `searchQuery` string to search for nodes with\n  // matching `title` or `subtitle` values.\n  // NOTE: Changing `searchMethod` will not update the search, but changing the `searchQuery` will.\n  searchMethod: PropTypes.func,\n\n  // Used by the `searchMethod` to highlight and scroll to matched nodes.\n  // Should be a string for the default `searchMethod`, but can be anything when using a custom search.\n  searchQuery: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n\n  // Outline the <`searchFocusOffset`>th node and scroll to it.\n  searchFocusOffset: PropTypes.number,\n\n  // Get the nodes that match the search criteria. Used for counting total matches, etc.\n  searchFinishCallback: PropTypes.func,\n\n  // Generate an object with additional props to be passed to the node renderer.\n  // Use this for adding buttons via the `buttons` key,\n  // or additional `style` / `className` settings.\n  generateNodeProps: PropTypes.func,\n\n  // Set to false to disable virtualization.\n  // NOTE: Auto-scrolling while dragging, and scrolling to the `searchFocusOffset` will be disabled.\n  isVirtualized: PropTypes.bool,\n\n  treeNodeRenderer: PropTypes.func,\n\n  // Override the default component for rendering nodes (but keep the scaffolding generator)\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `node-renderer-default.js` to use as a base, and customize as needed.\n  nodeContentRenderer: PropTypes.func,\n\n  // Override the default component for rendering an empty tree\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `placeholder-renderer-default.js` to use as a base,\n  // and customize as needed.\n  placeholderRenderer: PropTypes.func,\n\n  theme: PropTypes.shape({\n    style: PropTypes.shape({}),\n    innerStyle: PropTypes.shape({}),\n    reactVirtualizedListProps: PropTypes.shape({}),\n    scaffoldBlockPxWidth: PropTypes.number,\n    slideRegionSize: PropTypes.number,\n    rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    treeNodeRenderer: PropTypes.func,\n    nodeContentRenderer: PropTypes.func,\n    placeholderRenderer: PropTypes.func,\n  }),\n\n  // Determine the unique key used to identify each node and\n  // generate the `path` array passed in callbacks.\n  // By default, returns the index in the tree (omitting hidden nodes).\n  getNodeKey: PropTypes.func,\n\n  // Called whenever tree data changed.\n  // Just like with React input elements, you have to update your\n  // own component's data to see the changes reflected.\n  onChange: PropTypes.func.isRequired,\n\n  // Called after node move operation.\n  onMoveNode: PropTypes.func,\n\n  // Determine whether a node can be dragged. Set to false to disable dragging on all nodes.\n  canDrag: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n\n  // Determine whether a node can be dropped based on its path and parents'.\n  canDrop: PropTypes.func,\n\n  // When true, or a callback returning true, dropping nodes to react-dnd\n  // drop targets outside of this tree will not remove them from this tree\n  shouldCopyOnOutsideDrop: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.bool,\n  ]),\n\n  // Called after children nodes collapsed or expanded.\n  onVisibilityToggle: PropTypes.func,\n\n  dndType: PropTypes.string,\n\n  // Called to track between dropped and dragging\n  onDragStateChanged: PropTypes.func,\n\n  // Specify that nodes that do not match search will be collapsed\n  onlyExpandSearchedNodes: PropTypes.bool,\n};\n\nReactSortableTree.defaultProps = {\n  canDrag: true,\n  canDrop: null,\n  className: '',\n  dndType: null,\n  generateNodeProps: null,\n  getNodeKey: defaultGetNodeKey,\n  innerStyle: {},\n  isVirtualized: true,\n  maxDepth: null,\n  treeNodeRenderer: null,\n  nodeContentRenderer: null,\n  onMoveNode: () => {},\n  onVisibilityToggle: () => {},\n  placeholderRenderer: null,\n  reactVirtualizedListProps: {},\n  rowHeight: null,\n  scaffoldBlockPxWidth: null,\n  searchFinishCallback: null,\n  searchFocusOffset: null,\n  searchMethod: null,\n  searchQuery: null,\n  shouldCopyOnOutsideDrop: false,\n  slideRegionSize: null,\n  style: {},\n  theme: {},\n  onDragStateChanged: () => {},\n  onlyExpandSearchedNodes: false,\n};\n\nReactSortableTree.contextTypes = {\n  dragDropManager: PropTypes.shape({}),\n};\n\n// Export the tree component without the react-dnd DragDropContext,\n// for when component is used with other components using react-dnd.\n// see: https://github.com/gaearon/react-dnd/issues/186\nexport { ReactSortableTree as SortableTreeWithoutDndContext };\n\nexport default DndManager.wrapRoot(ReactSortableTree);\n"],"mappings":"AAAA","sourceRoot":""}